#!/usr/bin/env bash

display_install_message()
{
  log "

Message:

I am wayneeseguin in #rvm on irc.freenode.net and I am happy to discuss
improving this script, or field questions.

This script will now:

* Install ${package_name}-${package_version} to $install_path
* Put init script in place
* Add postgresql to ldconfig (Linux)
* Create and initialize data directory
* Setup profile.d script adding postgresql binaries to the path
* Add conf.d file allowing for server customization
* Adjust sysctl kernel parameters for postgresql (Linux)

"
}

postgresql_initialize()
{
  user_create_if_missing "$package_user"
  postgresql_initdb
  postgresql_init_script
  postgresql_conf_d
  postgresql_kernel_parameters

  log "
  Installation and configuration of postgresql is now complete.

  * postgresql has been installed to $install_path
  * postgresql configuration and data files will are in $service_data_path
  * You can control the postgresql server via the bdsm postgresql extension'
  * The postgersql superuser is '$package_user', no password.
  * Use /etc/conf.d/postgresql.conf for server startup customization.

  "
}

postgresql_kernel_parameters()
{
  true # TODO: Cross the finish line!!!
}

postgresql_initdb()
{
  log "Initializing postgresql data directory in $service_data_path"
  ensure_paths_exist "${service_data_path}"
  chown_paths_recursively "$package_user:$package_user" "${service_data_path}"

  command="'$install_path/bin/initdb' --pgdata='${service_data_path}/data' --encoding=utf8 --username=$package_user"

  if user_is_root
  then
    user_run_as "${package_user}" "${command}"
  else
    "${command}"
  fi

  chown_paths_recursively "$package_user:$package_user" "${service_data_path}"
  chmod_paths_recursively 0700 "${service_data_path}"

  postgresql_conf
}

postgresql_conf()
{
  local file _entries
  log "Configuring postgresql server."

  ensure_paths_exist "${service_data_path}" "$log_path"

  link --force "${service_data_path}" to "${data_base_path}/active"

  for file in postgresql pg_hba pg_ident recovery
  do

   log "service_data_path: ${service_data_path}"

    if file_is_empty_or_missing "${service_data_path}/${file}.conf"
    then
      if file_is_missing "$service_data_path/${file}.conf.sample"
      then
        log "Missing $service_data_path/${file}.conf.sample, skipping."
        continue
      fi
      log "Installing ${file}.conf to ${service_data_path}/"

      copy_file "$service_data_path/${file}.conf.sample" \
        to "$service_data_path/${file}.conf"

      if file_is_missing "${service_config_path}/${file}.conf"
      then
        link "$service_data_path/${file}.conf" \
          to "${service_config_path}/${file}.conf"
      fi
    fi
  done

  chown_paths_recursively "$package_user" "$data_base_path"
  chmod_paths_recursively 0600 "${service_data_path}"

  _entries="$(find "${service_data_path}" -type f)"
  chmod_files 0600 "${_entries[@]}"

  _entries="$(find "${service_data_path}" -type d)"
  chmod_paths 0700 "${_entries[@]}"
}

postgresql_init_script()
{
  log "Installing Postgresql init script"
  install_template "postgresql" to "${init_scripts_path}/postgresql" mode 0755
}

postgresql_conf_d()
{
  if user_is_root
  then
    ensure_paths_exist "/etc/conf.d"

    log "Installing Postgresql conf.d script"

    install_template "postgresql.conf.d" \
      to "/etc/conf.d/postgresql.conf" \
      mode 0644
  fi
}


postgresql_preconfigure()
{
  if [[ "$action" = *install ]]
  then
    configure_flags=(
      --prefix="${install_base_path}/${package_version}"
      --datadir="${service_data_path}"
      --with-openssl
      --enable-shared
    )

    if os_is_darwin
    then
      configure_flags[${#configure_flags[@]}]="--with-bonjour"
    fi

    export CFLAGS='-O2'
  fi
}

# TODO: Enable this at the service level.
postgresql_reload()
{
  log "Reload PostgreSQL Server configuration"

  user_run_as "${service_user}" "$control reload -D '${service_data_path}' -s"
}
